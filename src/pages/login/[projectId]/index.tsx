import Head from "next/head";
import styles from "@/styles/login.module.css";
import { useEffect, useState } from "react";
import { useMutation, useQuery } from "react-query";
import axios from "axios";
import { URL } from "@/services/baseURL";
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import Image from "next/image";
import SectionContext from "@/context/sectionContext";
import { useSectionStore } from "@/store/section";
var cookieCutter = require('cookie-cutter');

    

export default function ProjectLogin() {
  const [ email, setEmail ] = useState('')
  const [ password, setPassword ] = useState('')

  const { section } = useSectionStore()

  const {push} = useRouter()

  const router = useRouter();
  const { projectId } = router.query;

  const { mutate, isLoading } = useMutation(
    async () => 
      await axios.post(`${URL}/auth/player-login`, {
          email: email?.toLocaleLowerCase(),
          project_id: projectId,
          password: password
      }),
      {
        onSuccess: ({ data: data0 }) => {
          cookieCutter.set('@access_token_player', data0.access_token, {
            path: "/",
            expires: new Date(new Date().getTime() + 60 * 60 * 23 * 1000),
          })
          push('/section/')
        },
        onError: (data: any) => {
          let msg = data.response.data.message
          if(typeof msg === "string"){
            if(msg === "Unauthorized"){
              msg = 'Sem autorização.'
            }

            if(msg === "Email or password provide is incorrect."){
              msg = 'Acesso ou senha estão incorretos.'
            }

            toast(`Algo de errado com os acessos.`, {
              position: "bottom-center",
              autoClose: 3000,
              type: "error",
            })
          }
        }
      }
  )


  const login = (e: any) => {
    e.preventDefault();
    return mutate()
  }

//   const { data, isLoading, isError } = useQuery('project', async () => {
//   })

  
  return (
    <SectionContext>
      <Head>
        <title>RPG Master | Login Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icons/logo.svg" />
      </Head>
      <main className={styles.main}>
        <div className={styles.fundoGeral}>

            <div className={styles.fundoLogin}>

            <div className={styles.fundoForms}>

                <div className={styles.alinharCentro}>
                <Image width={450} height={100} className={styles.logo} src="/logo.svg" alt="Logo RPG master" />
                </div>


                {section[0] !== undefined && <h2 className={styles.nomeRPG}>{section[0].name}</h2>}
                <form onSubmit={login} className={styles.alinharForms}>

                <div className={styles.alinharCampoForms}>
                    <label htmlFor="email" >Username</label>
                    <input className={styles.inputForms} name="text" type="text" placeholder="Crie ou acesso com seu username" onChange={(e: any) => setEmail(e.target.value)} />
                </div>

                <div className={styles.alinharCampoForms}>
                    <label htmlFor="password" >Senha</label>
                    <input className={styles.inputForms} name="password" type="password" placeholder="Senha do Mestre" onChange={(e: any) => setPassword(e.target.value)}  />
                </div>
                
                <input className={styles.botaoForms} type="submit" value="Login" />

                </form>
                
            </div>
            </div>
        </div>
     </main>
    </SectionContext>
  );
}
